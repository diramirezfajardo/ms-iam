import { IsDate, IsNumber, IsString } from 'class-validator';
import { DateTime } from 'luxon';
import {
  AfterLoad,
  BeforeInsert,
  BeforeUpdate,
  Column,
  Entity,
  JoinColumn,
  ManyToOne,
  PrimaryGeneratedColumn,
} from 'typeorm';
import { UserEntity } from './user.entity';

@Entity('user_sessions')
export class UserSessionEntity {
  @IsNumber()
  @PrimaryGeneratedColumn()
  id?: number;

  @IsNumber()
  @Column({ name: 'user_id' })
  userId?: number;

  @IsString()
  @Column({ name: 'access_token', length: 512, unique: true })
  accessToken?: string;

  @IsString()
  @Column({ name: 'refresh_token', length: 512, unique: true })
  refreshToken?: string;

  @IsDate()
  @Column({ name: 'created_at', type: 'timestamp' })
  createdAt?: DateTime | Date;

  @IsDate()
  @Column({ name: 'updated_at', type: 'timestamp' })
  updatedAt?: DateTime | Date;

  @AfterLoad()
  afterLoad() {
    this.id = this.id ? +this.id : undefined;
    this.createdAt = DateTime.fromJSDate(<Date>this.createdAt);
    this.updatedAt = DateTime.fromJSDate(<Date>this.updatedAt);
  }

  @BeforeInsert()
  autogeneratedInsertData() {
    this.createdAt = DateTime.now().toJSDate();
  }

  @BeforeUpdate()
  autogeneratedUpdateData1() {
    this.createdAt = (this.createdAt as DateTime).toJSDate();
  }

  @BeforeUpdate()
  autogeneratedUpdateData2() {
    this.updatedAt = DateTime.now().toJSDate();
  }

  @ManyToOne(
    () => UserSessionEntity,
    (userEntity: UserEntity) => userEntity?.sessions,
  )
  @JoinColumn({ name: 'user_id', referencedColumnName: 'id' })
  user?: UserEntity;
}
